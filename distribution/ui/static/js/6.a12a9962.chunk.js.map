{"version":3,"sources":["api/fetch.ts","api/url.ts","api/namespace.ts","views/namespace/NamespaceList.tsx"],"names":["Method","parseQuery","data","query","datas","k","push","length","join","init","method","GET","body","JSON","stringify","headers","requestJSON","url","a","fetch","res","ok","json","Error","statusText","requestString","text","prefix","URL_NAMESPACE_NAMES","URL_NAMESPACES","URL_CLUSTER_NODES","URL_SERVICES","URL_INSTANCES","URL_INSTANCE","getNamespaceNames","undefined","getNamespaces","useState","React","useEffect","columns","title","dataIndex","key","NamespaceList","namespaces","setNamespaces","loading","setLoading","then","catch","e","message","error","rowKey","record","namespace","dataSource","pagination"],"mappings":"0NAEYA,E,kCAOZ,SAASC,EAAcC,GACrB,IAAIC,EAAQ,GACZ,GAAID,EAAM,CACR,IAAME,EAAQ,GACd,IAAK,IAAMC,KAAKH,EACVG,GACFD,EAAME,KAAN,UAAcD,EAAd,YAAmBH,EAAKG,KAGxBD,EAAMG,OAAS,IACjBJ,EAAQ,IAAMC,EAAMI,KAAK,MAG7B,OAAOL,EAGT,SAASM,EAAQC,EAAgBR,GAC/B,OAAIQ,IAAWV,EAAOW,IACb,GAEF,CACLD,SACAE,KAAMC,KAAKC,UAAUZ,GACrBa,QAAS,CACP,eAAgB,oCAKf,SAAeC,EAAtB,sC,4CAAO,WAAiCC,EAAaP,EAAgBR,GAA9D,iBAAAgB,EAAA,6DACDf,EAAQ,GACRO,IAAWV,EAAOW,MACpBR,EAAQF,EAAcC,IAHnB,SAKaiB,MAAMF,EAAMd,EAAOM,EAAKC,EAAQR,IAL7C,YAKCkB,EALD,QAMGC,GANH,yCAOID,EAAIE,QAPR,aASC,IAAIC,MAAMH,EAAII,YATf,4C,sBAYA,SAAeC,EAAtB,sC,4CAAO,WAAgCR,EAAaP,EAAgBR,GAA7D,iBAAAgB,EAAA,6DACDf,EAAQ,GACRO,IAAWV,EAAOW,MACpBR,EAAQF,EAAWC,IAHhB,SAKaiB,MAAMF,EAAMd,EAAOM,EAAKC,EAAQR,IAL7C,YAKCkB,EALD,QAMGC,GANH,yCAOID,EAAIM,QAPR,aASC,IAAIH,MAAMH,EAAII,YATf,4C,gCAhDKxB,K,UAAAA,E,YAAAA,E,UAAAA,E,iBAAAA,M,uCCFZ,gNAAI2B,EAAS,wBAOPC,GAJJD,EAAS,IAI0B,2BAC/BE,EAAiBF,EAAS,sBAC1BG,EAAoBH,EAAS,yBAC7BI,EAAeJ,EAAS,oBACxBK,EAAgBL,EAAS,qBAEzBM,EAAeN,EAAS,iB,iCCb9B,0FAQO,SAASO,IACd,OAAOlB,YAAiCY,IAAqB5B,IAAOW,SAAKwB,GAGpE,SAASC,IACd,OAAOpB,YAAwCa,IAAgB7B,IAAOW,SAAKwB,K,sGCTrEE,EAAwBC,IAAxBD,SAAUE,EAAcD,IAAdC,UAEZC,EAAU,CACd,CACEC,MAAO,2BACPC,UAAW,YACXC,IAAK,aAEP,CACEF,MAAO,2BACPC,UAAW,eACXC,IAAK,iBA+BMC,UA3Bf,WAEE,MAAoCP,EAAS,IAA7C,mBAAOQ,EAAP,KAAmBC,EAAnB,KAEA,EAA8BT,GAAS,GAAvC,mBAAOU,EAAP,KAAgBC,EAAhB,KAWA,OATAT,GAAU,WACRH,cAAgBa,MAAK,SAAA/C,GACnB4C,EAAc5C,GACd8C,GAAW,MACVE,OAAM,SAAAC,GACPC,IAAQC,MAAM,yDAAcF,EAAEC,cAE/B,IAGD,mCACE,cAAC,IAAD,CACEE,OAAQ,SAAAC,GAAM,OAAIA,EAAOC,WACzBhB,QAASA,EACTiB,WAAYZ,EACZE,QAASA,EACTW,YAAY","file":"static/js/6.a12a9962.chunk.js","sourcesContent":["import \"whatwg-fetch\";\r\n\r\nexport enum Method {\r\n  GET = \"GET\",\r\n  POST = \"POST\",\r\n  PUT = \"PUT\",\r\n  DELETE = \"DELETE\",\r\n}\r\n\r\nfunction parseQuery<T>(data: T) {\r\n  let query = \"\";\r\n  if (data) {\r\n    const datas = [];\r\n    for (const k in data) {\r\n      if (k) {\r\n        datas.push(`${k}=${data[k]}`);\r\n      }\r\n    }\r\n    if (datas.length > 0) {\r\n      query = \"?\" + datas.join(\"&\");\r\n    }\r\n  }\r\n  return query;\r\n}\r\n\r\nfunction init<T>(method: Method, data: T) {\r\n  if (method === Method.GET) {\r\n    return {};\r\n  }\r\n  return {\r\n    method,\r\n    body: JSON.stringify(data),\r\n    headers: {\r\n      \"Content-Type\": \"application/json; charset=utf-8\"\r\n    }\r\n  }\r\n}\r\n\r\nexport async function requestJSON<T, S>(url: string, method: Method, data: T): Promise<S> {\r\n  let query = \"\";\r\n  if (method === Method.GET) {\r\n    query = parseQuery<T>(data);\r\n  }\r\n  const res = await fetch(url + query, init(method, data));\r\n  if (res.ok) {\r\n    return res.json();\r\n  }\r\n  throw new Error(res.statusText);\r\n}\r\n\r\nexport async function requestString<T>(url: string, method: Method, data: T): Promise<string> {\r\n  let query = \"\";\r\n  if (method === Method.GET) {\r\n    query = parseQuery(data);\r\n  }\r\n  const res = await fetch(url + query, init(method, data));\r\n  if (res.ok) {\r\n    return res.text();\r\n  }\r\n  throw new Error(res.statusText);\r\n}\r\n","let prefix = \"http://localhost:9080\";\r\n\r\nif (process.env.NODE_ENV === \"production\") {\r\n  prefix = \"\";\r\n}\r\n\r\n\r\nconst URL_NAMESPACE_NAMES = prefix + \"/console/namespace/names\";\r\nconst URL_NAMESPACES = prefix + \"/console/namespaces\";\r\nconst URL_CLUSTER_NODES = prefix + \"/console/cluster/nodes\";\r\nconst URL_SERVICES = prefix + \"/console/services\";\r\nconst URL_INSTANCES = prefix + \"/console/instances\";\r\n\r\nconst URL_INSTANCE = prefix + \"/api/instance\";\r\n\r\n\r\nexport {\r\n  URL_NAMESPACE_NAMES,\r\n  URL_NAMESPACES,\r\n  URL_CLUSTER_NODES,\r\n  URL_SERVICES,\r\n  URL_INSTANCES,\r\n  URL_INSTANCE\r\n}\r\n","import { requestJSON, Method } from \"./fetch\";\r\nimport { URL_NAMESPACE_NAMES, URL_NAMESPACES } from \"./url\";\r\n\r\nexport interface NamespaceInfo {\r\n  namespace: string,\r\n  serviceCount: number,\r\n}\r\n\r\nexport function getNamespaceNames() {\r\n  return requestJSON<void, Array<string>>(URL_NAMESPACE_NAMES, Method.GET, undefined);\r\n}\r\n\r\nexport function getNamespaces() {\r\n  return requestJSON<void, Array<NamespaceInfo>>(URL_NAMESPACES, Method.GET, undefined);\r\n}\r\n","import React from \"react\";\r\nimport { Table, message } from \"antd\";\r\nimport { getNamespaces, NamespaceInfo } from \"../../api/namespace\";\r\n\r\nconst { useState, useEffect } = React;\r\n\r\nconst columns = [\r\n  {\r\n    title: \"命名空间\",\r\n    dataIndex: \"namespace\",\r\n    key: \"namespace\",\r\n  },\r\n  {\r\n    title: \"服务数量\",\r\n    dataIndex: \"serviceCount\",\r\n    key: \"serviceCount\",\r\n  }\r\n];\r\n\r\nfunction NamespaceList() {\r\n\r\n  const [namespaces, setNamespaces] = useState([] as Array<NamespaceInfo>);\r\n\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    getNamespaces().then(data => {\r\n      setNamespaces(data);\r\n      setLoading(false);\r\n    }).catch(e => {\r\n      message.error(\"获取命名空间失败：\" + e.message);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Table\r\n        rowKey={record => record.namespace}\r\n        columns={columns}\r\n        dataSource={namespaces}\r\n        loading={loading}\r\n        pagination={false} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default NamespaceList;\r\n"],"sourceRoot":""}
{"version":3,"sources":["api/fetch.ts","api/url.ts","api/instance.ts","views/instance/InstanceList.tsx"],"names":["Method","parseQuery","data","query","datas","k","push","length","join","init","method","GET","body","JSON","stringify","headers","requestJSON","url","a","fetch","res","ok","json","Error","statusText","requestString","text","prefix","URL_NAMESPACE_NAMES","URL_NAMESPACES","URL_CLUSTER_NODES","URL_SERVICES","URL_INSTANCES","URL_INSTANCE","InstanceStatus","Column","Table","useState","React","useEffect","InstanceList","useParams","namespace","serviceName","instances","setInstances","loading","setLoading","deregister","record","Modal","confirm","title","icon","ExclamationCircleOutlined","okText","cancelText","onOk","cluster","ip","port","DELETE","then","fetchInstances","catch","e","message","error","param","instanceList","rowKey","instanceId","dataSource","pagination","dataIndex","render","status","color","UN_HEALTHY","DISABLE","size","onClick"],"mappings":"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","file":"static/js/8.9eb5525d.chunk.js","sourcesContent":["import \"whatwg-fetch\";\r\n\r\nexport enum Method {\r\n  GET = \"GET\",\r\n  POST = \"POST\",\r\n  PUT = \"PUT\",\r\n  DELETE = \"DELETE\",\r\n}\r\n\r\nfunction parseQuery<T>(data: T) {\r\n  let query = \"\";\r\n  if (data) {\r\n    const datas = [];\r\n    for (const k in data) {\r\n      if (k) {\r\n        datas.push(`${k}=${data[k]}`);\r\n      }\r\n    }\r\n    if (datas.length > 0) {\r\n      query = \"?\" + datas.join(\"&\");\r\n    }\r\n  }\r\n  return query;\r\n}\r\n\r\nfunction init<T>(method: Method, data: T) {\r\n  if (method === Method.GET) {\r\n    return {};\r\n  }\r\n  return {\r\n    method,\r\n    body: JSON.stringify(data),\r\n    headers: {\r\n      \"Content-Type\": \"application/json; charset=utf-8\"\r\n    }\r\n  }\r\n}\r\n\r\nexport async function requestJSON<T, S>(url: string, method: Method, data: T): Promise<S> {\r\n  let query = \"\";\r\n  if (method === Method.GET) {\r\n    query = parseQuery<T>(data);\r\n  }\r\n  const res = await fetch(url + query, init(method, data));\r\n  if (res.ok) {\r\n    return res.json();\r\n  }\r\n  throw new Error(res.statusText);\r\n}\r\n\r\nexport async function requestString<T>(url: string, method: Method, data: T): Promise<string> {\r\n  let query = \"\";\r\n  if (method === Method.GET) {\r\n    query = parseQuery(data);\r\n  }\r\n  const res = await fetch(url + query, init(method, data));\r\n  if (res.ok) {\r\n    return res.text();\r\n  }\r\n  throw new Error(res.statusText);\r\n}\r\n","let prefix = \"http://localhost:9080\";\r\n\r\nif (process.env.NODE_ENV === \"production\") {\r\n  prefix = \"\";\r\n}\r\n\r\n\r\nconst URL_NAMESPACE_NAMES = prefix + \"/console/namespace/names\";\r\nconst URL_NAMESPACES = prefix + \"/console/namespaces\";\r\nconst URL_CLUSTER_NODES = prefix + \"/console/cluster/nodes\";\r\nconst URL_SERVICES = prefix + \"/console/services\";\r\nconst URL_INSTANCES = prefix + \"/console/instances\";\r\n\r\nconst URL_INSTANCE = prefix + \"/api/instance\";\r\n\r\n\r\nexport {\r\n  URL_NAMESPACE_NAMES,\r\n  URL_NAMESPACES,\r\n  URL_CLUSTER_NODES,\r\n  URL_SERVICES,\r\n  URL_INSTANCES,\r\n  URL_INSTANCE\r\n}\r\n","import { requestJSON, requestString, Method } from \"./fetch\";\r\nimport { URL_INSTANCES, URL_INSTANCE } from \"./url\";\r\n\r\nexport enum InstanceStatus {\r\n  HEALTHY = \"HEALTHY\",\r\n  UN_HEALTHY = \"UN_HEALTHY\",\r\n  DISABLE = \"DISABLE\",\r\n  UNKNOWN = \"UNKNOWN\",\r\n}\r\n\r\nexport interface InstancesReqData {\r\n  namespace?: string,\r\n  serviceName: string,\r\n}\r\n\r\ninterface InstancesResData {\r\n  serviceName: string,\r\n  instanceList: Array<InstanceInfo>,\r\n}\r\n\r\nexport interface InstanceInfo {\r\n  instanceId: string,\r\n  cluster: string,\r\n  serviceName: string,\r\n  ip: string,\r\n  port: number,\r\n  status: InstanceStatus,\r\n}\r\n\r\ninterface InstanceDeregisterData {\r\n  namespace?: string,\r\n  cluster?: string,\r\n  serviceName: string,\r\n  ip: string,\r\n  port: number,\r\n}\r\n\r\nexport function getInstances(data: InstancesReqData) {\r\n  return requestJSON<InstancesReqData, InstancesResData>(URL_INSTANCES, Method.GET, data);\r\n}\r\n\r\nexport function deregisterInstance(data: InstanceDeregisterData) {\r\n  return requestString<InstanceDeregisterData>(URL_INSTANCE, Method.DELETE, data);\r\n}\r\n","import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Table, Tag, Space, Modal, message } from  \"antd\";\r\nimport {\r\n  getInstances,\r\n  deregisterInstance,\r\n  InstancesReqData,\r\n  InstanceInfo,\r\n  InstanceStatus\r\n} from \"../../api/instance\";\r\n\r\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\r\n\r\nconst { Column } = Table;\r\n\r\nconst { useState, useEffect } = React;\r\n\r\nfunction InstanceList() {\r\n\r\n  const { namespace, serviceName } = useParams();\r\n\r\n  const [instances, setInstances] = useState([] as Array<InstanceInfo>);\r\n\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const deregister = (record: InstanceInfo) => {\r\n    Modal.confirm({\r\n      title: \"你确定要删除吗？\",\r\n      icon: <ExclamationCircleOutlined />,\r\n      okText: \"确定\",\r\n      cancelText: \"取消\",\r\n      onOk() {\r\n        deregisterInstance({\r\n          namespace,\r\n          cluster: record.cluster,\r\n          serviceName: record.serviceName,\r\n          ip: record.ip,\r\n          port: record.port,\r\n        }).then(() => {\r\n          fetchInstances({ namespace, serviceName: serviceName as string });\r\n        }).catch(e => {\r\n          message.error(\"删除实例失败：\" + e.message);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  const fetchInstances = (param: InstancesReqData) => {\r\n    getInstances(param).then(data => {\r\n      setInstances(data.instanceList);\r\n      setLoading(false);\r\n    }).catch(e => {\r\n      message.error(\"获取实例列表失败：\" + e.message);\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchInstances({ namespace, serviceName: serviceName as string });\r\n  }, [namespace, serviceName]);\r\n\r\n  return (\r\n    <>\r\n      <Table\r\n        rowKey={record => record.instanceId}\r\n        dataSource={instances}\r\n        loading={loading}\r\n        pagination={false}>\r\n        <Column title=\"实例 ID\" dataIndex=\"instanceId\" key=\"instanceId\" />\r\n        <Column title=\"集群\" dataIndex=\"cluster\" key=\"cluster\" />\r\n        <Column title=\"服务名\" dataIndex=\"serviceName\" key=\"serviceName\" />\r\n        <Column title=\"IP\" dataIndex=\"ip\" key=\"ip\" />\r\n        <Column title=\"端口\" dataIndex=\"port\" key=\"port\" />\r\n        <Column title=\"状态\" dataIndex=\"status\" key=\"status\" render={(status: InstanceStatus)  =>  {\r\n            let  color  =  \"green\";\r\n            if (status === InstanceStatus.UN_HEALTHY) {\r\n              color = \"orange\";\r\n            } else if (status === InstanceStatus.DISABLE)  {\r\n              color = \"red\";\r\n            }\r\n            return (\r\n              <Tag color={color}>\r\n                {status}\r\n              </Tag>\r\n            )\r\n          }} />\r\n        <Column title=\"操作\" key=\"action\" render={(text: any, record: InstanceInfo) => (\r\n            <Space size=\"middle\">\r\n              {/* eslint-disable-next-line */}\r\n              <a onClick={() => { deregister(record) }}>删除实例</a>\r\n            </Space>\r\n          )} />\r\n      </Table>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default InstanceList;\r\n"],"sourceRoot":""}